
#include "test8.c.opari.inc"
#line 1 "test8.c"
/*
 * This file is part of the Score-P software (http://www.score-p.org)
 *
 * Copyright (c) 2009-2011,
 *    RWTH Aachen University, Germany
 *    Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
 *    Technische Universitaet Dresden, Germany
 *    University of Oregon, Eugene, USA
 *    Forschungszentrum Juelich GmbH, Germany
 *    German Research School for Simulation Sciences GmbH, Juelich/Aachen, Germany
 *    Technische Universitaet Muenchen, Germany
 *
 * See the COPYING file in the package base directory for details.
 *
 * Testfile for automated testing of OPARI2
 *
 * @authors Bernd Mohr, Peter Philippen
 *
 * @brief Tests whether specific clauses are found and inserted into the CTC string.
 */

#include <stdio.h>
#ifdef _OPENMP
#endif

int j;
#line 28 "test8.c"
#pragma omp threadprivate(j)

int
main()
{
    int i = 5;
    int k = 0;

{
  int pomp2_num_threads = 4;
  int pomp2_if = (int)( k==0 );
  POMP2_Task_handle pomp2_old_task;
  POMP2_Parallel_fork(&pomp2_region_1, pomp2_if, pomp2_num_threads, &pomp2_old_task, pomp2_ctc_1 );
#line 36 "test8.c"
#pragma omp parallel                         reduction(+:k) POMP2_DLIST_00001 firstprivate(pomp2_old_task) if(pomp2_if) num_threads(pomp2_num_threads)
{   POMP2_Parallel_begin( &pomp2_region_1 );
#line 37 "test8.c"
    {
        printf( "parallel\n" );

{   POMP2_For_enter( &pomp2_region_2, pomp2_ctc_2  );
#line 40 "test8.c"
#pragma omp for reduction(+:k) schedule(dynamic, 5 ) collapse(1) nowait
        for ( i = 0; i < 4; ++i )
        {
            printf( "for %d\n", i );
            k++;
        }
{ POMP2_Task_handle pomp2_old_task;
  POMP2_Implicit_barrier_enter( &pomp2_region_2, &pomp2_old_task );
#pragma omp barrier
  POMP2_Implicit_barrier_exit( &pomp2_region_2, pomp2_old_task ); }
  POMP2_For_exit( &pomp2_region_2 );
 }
#line 46 "test8.c"

{   POMP2_Sections_enter( &pomp2_region_3, pomp2_ctc_3  );
#line 47 "test8.c"
#pragma omp sections reduction(+:k) nowait
        {
#line 49 "test8.c"
     #pragma omp section
{   POMP2_Section_begin( &pomp2_region_3, pomp2_ctc_3  );
#line 50 "test8.c"
            printf( "section 1\n" );
  POMP2_Section_end( &pomp2_region_3 ); }
#line 51 "test8.c"
     #pragma omp section
{   POMP2_Section_begin( &pomp2_region_3, pomp2_ctc_3  );
#line 52 "test8.c"
            { printf( "section 2\n" );
            }
  POMP2_Section_end( &pomp2_region_3 ); }
#line 54 "test8.c"
        }
{ POMP2_Task_handle pomp2_old_task;
  POMP2_Implicit_barrier_enter( &pomp2_region_3, &pomp2_old_task );
#pragma omp barrier
  POMP2_Implicit_barrier_exit( &pomp2_region_3, pomp2_old_task ); }
  POMP2_Sections_exit( &pomp2_region_3 );
 }
#line 55 "test8.c"
    }
{ POMP2_Task_handle pomp2_old_task;
  POMP2_Implicit_barrier_enter( &pomp2_region_1, &pomp2_old_task );
#pragma omp barrier
  POMP2_Implicit_barrier_exit( &pomp2_region_1, pomp2_old_task ); }
  POMP2_Parallel_end( &pomp2_region_1 ); }
  POMP2_Parallel_join( &pomp2_region_1, pomp2_old_task ); }
#line 56 "test8.c"

{
  int pomp2_num_threads = omp_get_max_threads();
  int pomp2_if = 1;
  POMP2_Task_handle pomp2_old_task;
  POMP2_Parallel_fork(&pomp2_region_4, pomp2_if, pomp2_num_threads, &pomp2_old_task, pomp2_ctc_4 );
#line 57 "test8.c"
 #pragma omp parallel POMP2_DLIST_00004 firstprivate(pomp2_old_task) if(pomp2_if) num_threads(pomp2_num_threads)
{   POMP2_Parallel_begin( &pomp2_region_4 );
#line 58 "test8.c"
    {
{
  int pomp2_if = (int)( true );
{ POMP2_Task_handle pomp2_old_task;
  POMP2_Task_handle pomp2_new_task;
if (pomp2_if)  POMP2_Untied_task_create_begin( &pomp2_region_5, &pomp2_new_task, &pomp2_old_task, pomp2_if, pomp2_ctc_5  );
#line 59 "test8.c"
#pragma omp task          untied POMP2_DLIST_00005 if(pomp2_if) firstprivate(pomp2_new_task, pomp2_if)
{ if (pomp2_if)  POMP2_Untied_task_begin( &pomp2_region_5, pomp2_new_task );
#line 60 "test8.c"
        {
            printf( "task\n" );
        }
if (pomp2_if)  POMP2_Untied_task_end( &pomp2_region_5 ); }
if (pomp2_if)  POMP2_Untied_task_create_end( &pomp2_region_5, pomp2_old_task ); }
}
#line 63 "test8.c"
    }
{ POMP2_Task_handle pomp2_old_task;
  POMP2_Implicit_barrier_enter( &pomp2_region_4, &pomp2_old_task );
#pragma omp barrier
  POMP2_Implicit_barrier_exit( &pomp2_region_4, pomp2_old_task ); }
  POMP2_Parallel_end( &pomp2_region_4 ); }
  POMP2_Parallel_join( &pomp2_region_4, pomp2_old_task ); }
#line 64 "test8.c"
}

{
  int pomp2_num_threads = 4;
  int pomp2_if = (int)( 1 );
  POMP2_Task_handle pomp2_old_task;
  POMP2_Parallel_fork(&pomp2_region_6, pomp2_if, pomp2_num_threads, &pomp2_old_task, pomp2_ctc_6 );
#line 66 "test8.c"
#pragma omp parallel                     reduction(+:k)                                                    POMP2_DLIST_00006 firstprivate(pomp2_old_task) if(pomp2_if) num_threads(pomp2_num_threads)
{   POMP2_Parallel_begin( &pomp2_region_6 );
{   POMP2_For_enter( &pomp2_region_6, pomp2_ctc_6  );
#line 66 "test8.c"
#pragma omp          for                                schedule(static,chunkif) collapse(1) ordered                         nowait
for ( i = 0; i < 4; ++i )
{
{   POMP2_Ordered_enter( &pomp2_region_7, pomp2_ctc_7  );
#line 69 "test8.c"
     #pragma omp ordered
{   POMP2_Ordered_begin( &pomp2_region_7 );
#line 70 "test8.c"
    printf( "for %d\n", i );
  POMP2_Ordered_end( &pomp2_region_7 ); }
  POMP2_Ordered_exit( &pomp2_region_7 );
 }
#line 71 "test8.c"

    k++;
}
{ POMP2_Task_handle pomp2_old_task;
  POMP2_Implicit_barrier_enter( &pomp2_region_6, &pomp2_old_task );
#pragma omp barrier
  POMP2_Implicit_barrier_exit( &pomp2_region_6, pomp2_old_task ); }
  POMP2_For_exit( &pomp2_region_6 );
 }
  POMP2_Parallel_end( &pomp2_region_6 ); }
  POMP2_Parallel_join( &pomp2_region_6, pomp2_old_task ); }
#line 74 "test8.c"

{
  int pomp2_num_threads = 4;
  int pomp2_if = (int)( (i+k)>5 );
  POMP2_Task_handle pomp2_old_task;
  POMP2_Parallel_fork(&pomp2_region_8, pomp2_if, pomp2_num_threads, &pomp2_old_task, pomp2_ctc_8 );
#line 75 "test8.c"
#pragma omp parallel                                     reduction(+:k) POMP2_DLIST_00008 firstprivate(pomp2_old_task) if(pomp2_if) num_threads(pomp2_num_threads)
{   POMP2_Parallel_begin( &pomp2_region_8 );
{   POMP2_Sections_enter( &pomp2_region_8, pomp2_ctc_8  );
#line 75 "test8.c"
#pragma omp          sections                                                             nowait
{
#line 77 "test8.c"
     #pragma omp section
{   POMP2_Section_begin( &pomp2_region_8, pomp2_ctc_8  );
#line 78 "test8.c"
    printf( "section 1\n" );
  POMP2_Section_end( &pomp2_region_8 ); }
#line 79 "test8.c"
     #pragma omp section
{   POMP2_Section_begin( &pomp2_region_8, pomp2_ctc_8  );
#line 80 "test8.c"
    { printf( "section 2\n" );
    }
  POMP2_Section_end( &pomp2_region_8 ); }
#line 82 "test8.c"
}
{ POMP2_Task_handle pomp2_old_task;
  POMP2_Implicit_barrier_enter( &pomp2_region_8, &pomp2_old_task );
#pragma omp barrier
  POMP2_Implicit_barrier_exit( &pomp2_region_8, pomp2_old_task ); }
  POMP2_Sections_exit( &pomp2_region_8 );
 }
  POMP2_Parallel_end( &pomp2_region_8 ); }
  POMP2_Parallel_join( &pomp2_region_8, pomp2_old_task ); }
#line 83 "test8.c"
