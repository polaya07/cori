
#line 1 "test2.f90"
! * This file is part of the Score-P software (http://www.score-p.org)
! *
! * Copyright (c) 2009-2011,
! *    RWTH Aachen University, Germany
! *    Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
! *    Technische Universitaet Dresden, Germany
! *    University of Oregon, Eugene, USA
! *    Forschungszentrum Juelich GmbH, Germany
! *    German Research School for Simulation Sciences GmbH, Juelich/Aachen, Germany
! *    Technische Universitaet Muenchen, Germany
! *
! * See the COPYING file in the package base directory for details.
! *
! * Testfile for automated testing of OPARI2
! *
! * @authors Bernd Mohr, Peter Philippen
! *
! * @brief Test the basic instrumentation of all directives.

program test2
      include 'test2.f90.opari.inc'
#line 21 "test2.f90"
  integer i
  integer k
  
  integer, save :: j
#line 25 "test2.f90"
  !$omp threadprivate(j)

      pomp2_num_threads = pomp2_lib_get_max_threads()
      pomp2_if = .true.
      call POMP2_Parallel_fork(pomp2_region_1,&
      pomp2_if, pomp2_num_threads, pomp2_old_task, &
      pomp2_ctc_1 )
#line 27 "test2.f90"
  !$omp parallel &
  !$omp firstprivate(pomp2_old_task) private(pomp2_new_task) &
  !$omp if(pomp2_if) num_threads(pomp2_num_threads)
      call POMP2_Parallel_begin(pomp2_region_1)
#line 28 "test2.f90"
  write(*,*) "parallel"
      call POMP2_Do_enter(pomp2_region_2, &
     pomp2_ctc_2 )
#line 29 "test2.f90"
  !$omp do
  do i=1,4
     write(*,*) "do",i
  enddo
#line 33 "test2.f90"
  !$omp end do nowait
      call POMP2_Implicit_barrier_enter(pomp2_region_2,&
      pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_2, pomp2_old_task)
      call POMP2_Do_exit(pomp2_region_2)
#line 34 "test2.f90"
  
      call POMP2_Flush_enter(pomp2_region_3, &
     pomp2_ctc_3 )
#line 35 "test2.f90"
  !$omp flush(k)
      call POMP2_Flush_exit(pomp2_region_3)
#line 36 "test2.f90"
  
      call POMP2_Do_enter(pomp2_region_4, &
     pomp2_ctc_4 )
#line 37 "test2.f90"
  !$omp do ordered
  do i=1,4
      call POMP2_Ordered_enter(pomp2_region_5, &
     pomp2_ctc_5 )
#line 39 "test2.f90"
     !$omp ordered
      call POMP2_Ordered_begin(pomp2_region_5)
#line 40 "test2.f90"
     write(*,*) "do",i
      call POMP2_Ordered_end(pomp2_region_5)
#line 41 "test2.f90"
     !$omp end ordered
      call POMP2_Ordered_exit(pomp2_region_5)
#line 42 "test2.f90"
  enddo
#line 43 "test2.f90"
  !$omp end do nowait
      call POMP2_Implicit_barrier_enter(pomp2_region_4,&
      pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_4, pomp2_old_task)
      call POMP2_Do_exit(pomp2_region_4)
#line 44 "test2.f90"
  
      call POMP2_Barrier_enter(pomp2_region_6,&
      pomp2_old_task, pomp2_ctc_6 )
#line 45 "test2.f90"
  !$omp barrier
      call POMP2_Barrier_exit(pomp2_region_6, pomp2_old_task)
#line 46 "test2.f90"
  
      call POMP2_Sections_enter(pomp2_region_7, &
     pomp2_ctc_7 )
#line 47 "test2.f90"
  !$omp sections
#line 48 "test2.f90"
  !$omp section
      call POMP2_Section_begin(pomp2_region_7, &
     pomp2_ctc_7 )
#line 49 "test2.f90"
  write(*,*) "section 1"
      call POMP2_Section_end(pomp2_region_7)
#line 50 "test2.f90"
  !$omp section
      call POMP2_Section_begin(pomp2_region_7, &
     pomp2_ctc_7 )
#line 51 "test2.f90"
  write(*,*) "section 2"
      call POMP2_Section_end(pomp2_region_7)
#line 52 "test2.f90"
  !$omp end sections nowait
      call POMP2_Implicit_barrier_enter(pomp2_region_7,&
      pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_7, pomp2_old_task)
      call POMP2_Sections_exit(pomp2_region_7)
#line 53 "test2.f90"
  
#line 54 "test2.f90"
  !$omp master
      call POMP2_Master_begin(pomp2_region_8, &
     pomp2_ctc_8 )
#line 55 "test2.f90"
  write(*,*) "master"
      call POMP2_Master_end(pomp2_region_8)
#line 56 "test2.f90"
  !$omp end master
  
      call POMP2_Critical_enter(pomp2_region_9, &
     pomp2_ctc_9 )
#line 58 "test2.f90"
  !$omp critical
      call POMP2_Critical_begin(pomp2_region_9)
#line 59 "test2.f90"
  write(*,*) "critical"
      call POMP2_Critical_end(pomp2_region_9)
#line 60 "test2.f90"
  !$omp end critical
      call POMP2_Critical_exit(pomp2_region_9)
#line 61 "test2.f90"
  
      call POMP2_Critical_enter(pomp2_region_10, &
     pomp2_ctc_10 )
#line 62 "test2.f90"
  !$omp critical(foobar)
      call POMP2_Critical_begin(pomp2_region_10)
#line 63 "test2.f90"
  write(*,*) "critical(foobar)"
      call POMP2_Critical_end(pomp2_region_10)
#line 64 "test2.f90"
  !$omp end critical(foobar)
      call POMP2_Critical_exit(pomp2_region_10)
#line 65 "test2.f90"
  
      call POMP2_Atomic_enter(pomp2_region_11, &
     pomp2_ctc_11 )
#line 66 "test2.f90"
  !$omp atomic
  ! do this atomic
  i = i + 1
      call POMP2_Atomic_exit(pomp2_region_11)
#line 69 "test2.f90"
  
      call POMP2_Single_enter(pomp2_region_12, &
     pomp2_ctc_12 )
#line 70 "test2.f90"
  !$omp single
      call POMP2_Single_begin(pomp2_region_12)
#line 71 "test2.f90"
  write(*,*) "single"
      call POMP2_Single_end(pomp2_region_12)
#line 72 "test2.f90"
  !$omp end single nowait
      call POMP2_Implicit_barrier_enter(pomp2_region_12,&
      pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_12, pomp2_old_task)
      call POMP2_Single_exit(pomp2_region_12)
#line 73 "test2.f90"
  
      call POMP2_Workshare_enter(pomp2_region_13, &
     pomp2_ctc_13 )
#line 74 "test2.f90"
  !$omp workshare
  a = b + c
#line 76 "test2.f90"
  !$omp end workshare nowait
      call POMP2_Implicit_barrier_enter(pomp2_region_13,&
      pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_13, pomp2_old_task)
      call POMP2_Workshare_exit(pomp2_region_13)
#line 77 "test2.f90"
  
      call POMP2_Implicit_barrier_enter(pomp2_region_1,&
      pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_1, pomp2_old_task)
      call POMP2_Parallel_end(pomp2_region_1)
#line 78 "test2.f90"
  !$omp end parallel
      call POMP2_Parallel_join(pomp2_region_1, pomp2_old_task)
#line 79 "test2.f90"

      pomp2_num_threads = pomp2_lib_get_max_threads()
      pomp2_if = .true.
      call POMP2_Parallel_fork(pomp2_region_14,&
      pomp2_if, pomp2_num_threads, pomp2_old_task, &
      pomp2_ctc_14 )
#line 80 "test2.f90"
  !$omp parallel &
  !$omp firstprivate(pomp2_old_task) private(pomp2_new_task) &
  !$omp if(pomp2_if) num_threads(pomp2_num_threads)
      call POMP2_Parallel_begin(pomp2_region_14)
#line 81 "test2.f90"
      pomp2_if = .true.
      if (pomp2_if) then
      call POMP2_Task_create_begin(pomp2_region_15, pomp2_new_task,&
      pomp2_old_task, pomp2_if, pomp2_ctc_15 )
      end if
#line 81 "test2.f90"
  !$omp task if(pomp2_if) firstprivate(pomp2_new_task, pomp2_if)
      if (pomp2_if) then
      call POMP2_Task_begin(pomp2_region_15, pomp2_new_task)
      end if
#line 82 "test2.f90"
  write(*,*) "task"
      if (pomp2_if) then
      call POMP2_Task_end(pomp2_region_15)
      end if
#line 83 "test2.f90"
  !$omp end task
      if (pomp2_if) then
      call POMP2_Task_create_end(pomp2_region_15, pomp2_old_task)
      end if
#line 84 "test2.f90"

      call POMP2_Taskwait_begin(pomp2_region_16,&
      pomp2_old_task, pomp2_ctc_16 )
#line 85 "test2.f90"
  !$omp taskwait
      call POMP2_Taskwait_end(pomp2_region_16, pomp2_old_task)
#line 86 "test2.f90"
      call POMP2_Implicit_barrier_enter(pomp2_region_14,&
      pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_14, pomp2_old_task)
      call POMP2_Parallel_end(pomp2_region_14)
#line 86 "test2.f90"
  !$omp end parallel
      call POMP2_Parallel_join(pomp2_region_14, pomp2_old_task)
#line 87 "test2.f90"

  ! $ omp this should be ignored by opari and the compiler
  ! $ this too
   end program test2

      subroutine POMP2_Init_reg_000()
         include 'test2.f90.opari.inc'
         call POMP2_Assign_handle( pomp2_region_1, &
         pomp2_ctc_1 )
         call POMP2_Assign_handle( pomp2_region_2, &
         pomp2_ctc_2 )
         call POMP2_Assign_handle( pomp2_region_3, &
         pomp2_ctc_3 )
         call POMP2_Assign_handle( pomp2_region_4, &
         pomp2_ctc_4 )
         call POMP2_Assign_handle( pomp2_region_5, &
         pomp2_ctc_5 )
         call POMP2_Assign_handle( pomp2_region_6, &
         pomp2_ctc_6 )
         call POMP2_Assign_handle( pomp2_region_7, &
         pomp2_ctc_7 )
         call POMP2_Assign_handle( pomp2_region_8, &
         pomp2_ctc_8 )
         call POMP2_Assign_handle( pomp2_region_9, &
         pomp2_ctc_9 )
         call POMP2_Assign_handle( pomp2_region_10, &
         pomp2_ctc_10 )
         call POMP2_Assign_handle( pomp2_region_11, &
         pomp2_ctc_11 )
         call POMP2_Assign_handle( pomp2_region_12, &
         pomp2_ctc_12 )
         call POMP2_Assign_handle( pomp2_region_13, &
         pomp2_ctc_13 )
         call POMP2_Assign_handle( pomp2_region_14, &
         pomp2_ctc_14 )
         call POMP2_Assign_handle( pomp2_region_15, &
         pomp2_ctc_15 )
         call POMP2_Assign_handle( pomp2_region_16, &
         pomp2_ctc_16 )
      end
