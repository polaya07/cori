
#line 1 "test8.f"
! * This file is part of the Score-P software (http://www.score-p.org)
! *
! * Copyright (c) 2009-2011,
! *    RWTH Aachen University, Germany
! *    Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
! *    Technische Universitaet Dresden, Germany
! *    University of Oregon, Eugene, USA
! *    Forschungszentrum Juelich GmbH, Germany
! *    German Research School for Simulation Sciences GmbH, Juelich/Aachen, Germany
! *    Technische Universitaet Muenchen, Germany
! *
! * See the COPYING file in the package base directory for details.
! *
! * Testfile for automated testing of OPARI2
! *
! * @authors Bernd Mohr, Peter Philippen
! *
! * @brief Tests whether specific clauses are found and inserted into the CTC string.

      program test8
      include 'test8.f.opari.inc'
#line 21 "test8.f"
      integer i
      integer k
      
      integer, save :: j
#line 25 "test8.f"
!$omp threadprivate(j)

      pomp2_num_threads = 4
      pomp2_if = ( k.eq.0 )
      call POMP2_Parallel_fork(pomp2_region_1,
     &pomp2_if, pomp2_num_threads, pomp2_old_task,
     &pomp2_ctc_1 )
#line 27 "test8.f"
!$omp parallel                           reduction(+:k)
!$omp& firstprivate(pomp2_old_task) private(pomp2_new_task)
!$omp& if(pomp2_if) num_threads(pomp2_num_threads) 
      call POMP2_Parallel_begin(pomp2_region_1)
#line 28 "test8.f"
      write(*,*) "parallel"
      
      call POMP2_Do_enter(pomp2_region_2,
     &pomp2_ctc_2 )
#line 30 "test8.f"
!$omp do reduction(+:k) schedule(dynamic, 5) collapse(1)
      do i=1,4
         write(*,*) "do",i
         k = k + 1
      enddo
#line 35 "test8.f"
!$omp end do nowait
      call POMP2_Implicit_barrier_enter(pomp2_region_2,
     &pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_2,
     &pomp2_old_task)
      call POMP2_Do_exit(pomp2_region_2)
#line 36 "test8.f"
      
      call POMP2_Sections_enter(pomp2_region_3,
     &pomp2_ctc_3 )
#line 37 "test8.f"
!$omp sections reduction(+:k)
#line 38 "test8.f"
!$omp section
      call POMP2_Section_begin(pomp2_region_3,
     &pomp2_ctc_3 )
#line 39 "test8.f"
      write(*,*) "section 1"
      call POMP2_Section_end(pomp2_region_3)
#line 40 "test8.f"
!$omp section
      call POMP2_Section_begin(pomp2_region_3,
     &pomp2_ctc_3 )
#line 41 "test8.f"
      write(*,*) "section 2"
      call POMP2_Section_end(pomp2_region_3)
#line 42 "test8.f"
!$omp end sections nowait
      call POMP2_Implicit_barrier_enter(pomp2_region_3,
     &pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_3,
     &pomp2_old_task)
      call POMP2_Sections_exit(pomp2_region_3)
#line 43 "test8.f"
            
      call POMP2_Implicit_barrier_enter(pomp2_region_1,
     &pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_1,
     &pomp2_old_task)
      call POMP2_Parallel_end(pomp2_region_1)
#line 44 "test8.f"
!$omp end parallel
      call POMP2_Parallel_join(pomp2_region_1,
     &pomp2_old_task)
#line 45 "test8.f"

      pomp2_num_threads = pomp2_lib_get_max_threads()
      pomp2_if = .true.
      call POMP2_Parallel_fork(pomp2_region_4,
     &pomp2_if, pomp2_num_threads, pomp2_old_task,
     &pomp2_ctc_4 )
#line 46 "test8.f"
!$omp parallel
!$omp& firstprivate(pomp2_old_task) private(pomp2_new_task)
!$omp& if(pomp2_if) num_threads(pomp2_num_threads) 
      call POMP2_Parallel_begin(pomp2_region_4)
#line 47 "test8.f"
      pomp2_if = .true.
      if (pomp2_if) then
      call POMP2_Task_create_begin(pomp2_region_5,
     &pomp2_new_task,
     &pomp2_old_task, 
     &pomp2_if,
     &pomp2_ctc_5 )
      end if
#line 47 "test8.f"
!$omp task       
!$omp& if(pomp2_if) firstprivate(pomp2_new_task, pomp2_if)
      if (pomp2_if) then
      call POMP2_Task_begin(pomp2_region_5, pomp2_new_task)
      end if
#line 48 "test8.f"
      write(*,*) "task"
      if (pomp2_if) then
      call POMP2_Task_end(pomp2_region_5)
      end if
#line 49 "test8.f"
!$omp end task
      if (pomp2_if) then
      call POMP2_Task_create_end(pomp2_region_5,
     &pomp2_old_task)
      end if
#line 50 "test8.f"
      call POMP2_Implicit_barrier_enter(pomp2_region_4,
     &pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_4,
     &pomp2_old_task)
      call POMP2_Parallel_end(pomp2_region_4)
#line 50 "test8.f"
!$omp end parallel
      call POMP2_Parallel_join(pomp2_region_4,
     &pomp2_old_task)
#line 51 "test8.f"

      pomp2_num_threads = 4
      pomp2_if = ( .true. )
      call POMP2_Parallel_fork(pomp2_region_6,
     &pomp2_if, pomp2_num_threads, pomp2_old_task,
     &pomp2_ctc_6 )
#line 52 "test8.f"
!$omp  parallel                   reduction(+:k)
!$omp& firstprivate(pomp2_old_task) private(pomp2_new_task)
!$omp& if(pomp2_if) num_threads(pomp2_num_threads) 
      call POMP2_Parallel_begin(pomp2_region_6)
      call POMP2_Do_enter(pomp2_region_6,
     &pomp2_ctc_6 )
#line 52 "test8.f"
!$omp           do                              
!$omp+ schedule(static,chunkif) collapse(1) ordered           
      do i=1,4
      call POMP2_Ordered_enter(pomp2_region_7,
     &pomp2_ctc_7 )
#line 55 "test8.f"
!$omp ordered
      call POMP2_Ordered_begin(pomp2_region_7)
#line 56 "test8.f"
         write(*,*) "do",i
      call POMP2_Ordered_end(pomp2_region_7)
#line 57 "test8.f"
!$omp end ordered
      call POMP2_Ordered_exit(pomp2_region_7)
#line 58 "test8.f"
         k = k + 1
      enddo
#line 60 "test8.f"
!$omp end do nowait
      call POMP2_Implicit_barrier_enter(pomp2_region_6,
     &pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_6,
     &pomp2_old_task)
      call POMP2_Do_exit(pomp2_region_6)
      call POMP2_Parallel_end(pomp2_region_6)
#line 60 "test8.f"
!$omp end parallel
      call POMP2_Parallel_join(pomp2_region_6,
     &pomp2_old_task)
#line 61 "test8.f"

      pomp2_num_threads = 4
      pomp2_if = ( (i+k)>5 )
      call POMP2_Parallel_fork(pomp2_region_8,
     &pomp2_if, pomp2_num_threads, pomp2_old_task,
     &pomp2_ctc_8 )
#line 62 "test8.f"
!$omp parallel                                     reduction(+:k)
!$omp& firstprivate(pomp2_old_task) private(pomp2_new_task)
!$omp& if(pomp2_if) num_threads(pomp2_num_threads) 
      call POMP2_Parallel_begin(pomp2_region_8)
      call POMP2_Sections_enter(pomp2_region_8)
#line 62 "test8.f"
!$omp          sections                                          
#line 63 "test8.f"
!$omp section
      call POMP2_Section_begin(pomp2_region_8,
     &pomp2_ctc_8 )
#line 64 "test8.f"
      write(*,*) "section 1"
      call POMP2_Section_end(pomp2_region_8)
#line 65 "test8.f"
!$omp section
      call POMP2_Section_begin(pomp2_region_8,
     &pomp2_ctc_8 )
#line 66 "test8.f"
      write(*,*) "section 2"
      call POMP2_Section_end(pomp2_region_8)
#line 67 "test8.f"
!$omp end sections nowait
      call POMP2_Implicit_barrier_enter(pomp2_region_8,
     &pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_8,
     &pomp2_old_task)
      call POMP2_Sections_exit(pomp2_region_8)
      call POMP2_Parallel_end(pomp2_region_8)
#line 67 "test8.f"
!$omp end parallel
      call POMP2_Parallel_join(pomp2_region_8,
     &pomp2_old_task)
#line 68 "test8.f"

      pomp2_num_threads = 4
      pomp2_if = ( .true. )
      call POMP2_Parallel_fork(pomp2_region_9,
     &pomp2_if, pomp2_num_threads, pomp2_old_task,
     &pomp2_ctc_9 )
#line 69 "test8.f"
!$omp parallel                                     reduction(+:k)
!$omp& firstprivate(pomp2_old_task) private(pomp2_new_task)
!$omp& if(pomp2_if) num_threads(pomp2_num_threads) 
      call POMP2_Parallel_begin(pomp2_region_9)
      call POMP2_Workshare_enter(pomp2_region_9,
     &pomp2_ctc_9 )
#line 69 "test8.f"
!$omp          workshare                                         
      write(*,*) "workshare"
#line 71 "test8.f"
!$omp end workshare nowait
      call POMP2_Implicit_barrier_enter(pomp2_region_9,
     &pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_9,
     &pomp2_old_task)
      call POMP2_Workshare_exit(pomp2_region_9)
      call POMP2_Parallel_end(pomp2_region_9)
#line 71 "test8.f"
!$omp end parallel
      call POMP2_Parallel_join(pomp2_region_9,
     &pomp2_old_task)
#line 72 "test8.f"
      end program test2
      

      subroutine POMP2_Init_reg_000()
         include 'test8.f.opari.inc'
         call POMP2_Assign_handle( pomp2_region_1, 
     &   pomp2_ctc_1 )
         call POMP2_Assign_handle( pomp2_region_2, 
     &   pomp2_ctc_2 )
         call POMP2_Assign_handle( pomp2_region_3, 
     &   pomp2_ctc_3 )
         call POMP2_Assign_handle( pomp2_region_4, 
     &   pomp2_ctc_4 )
         call POMP2_Assign_handle( pomp2_region_5, 
     &   pomp2_ctc_5 )
         call POMP2_Assign_handle( pomp2_region_6, 
     &   pomp2_ctc_6 )
         call POMP2_Assign_handle( pomp2_region_7, 
     &   pomp2_ctc_7 )
         call POMP2_Assign_handle( pomp2_region_8, 
     &   pomp2_ctc_8 )
         call POMP2_Assign_handle( pomp2_region_9, 
     &   pomp2_ctc_9 )
      end
