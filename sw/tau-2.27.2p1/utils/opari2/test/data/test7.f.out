
#line 1 "test7.f"
! * This file is part of the Score-P software (http://www.score-p.org)
! *
! * Copyright (c) 2009-2011,
! *    RWTH Aachen University, Germany
! *    Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
! *    Technische Universitaet Dresden, Germany
! *    University of Oregon, Eugene, USA
! *    Forschungszentrum Juelich GmbH, Germany
! *    German Research School for Simulation Sciences GmbH, Juelich/Aachen, Germany
! *    Technische Universitaet Muenchen, Germany
! *
! * See the COPYING file in the package base directory for details.
! *
! * Testfile for automated testing of OPARI2
! *
! * @authors Bernd Mohr, Peter Philippen
! *
! * @brief Tests user instrumentation directives and selective instrumentation.

      program test7
      include 'test7.f.opari.inc'
#line 21 "test7.f"
      call POMP2_Init()
#line 22 "test7.f"

      call POMP2_Off()
#line 24 "test7.f"

      call POMP2_Begin(pomp2_region_1)
#line 26 "test7.f"

      pomp2_num_threads = pomp2_lib_get_max_threads()
      pomp2_if = .true.
      call POMP2_Parallel_fork(pomp2_region_2,
     &pomp2_if, pomp2_num_threads, pomp2_old_task,
     &pomp2_ctc_2 )
#line 27 "test7.f"
!$omp parallel
!$omp& firstprivate(pomp2_old_task) private(pomp2_new_task)
!$omp& if(pomp2_if) num_threads(pomp2_num_threads) 
      call POMP2_Parallel_begin(pomp2_region_2)
#line 28 "test7.f"
      i = 1
      call POMP2_Implicit_barrier_enter(pomp2_region_2,
     &pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_2,
     &pomp2_old_task)
      call POMP2_Parallel_end(pomp2_region_2)
#line 29 "test7.f"
!$omp end parallel
      call POMP2_Parallel_join(pomp2_region_2,
     &pomp2_old_task)
#line 30 "test7.f"

      call POMP2_End(pomp2_region_1)
#line 32 "test7.f"
      
      call POMP2_On()
#line 34 "test7.f"

#line 36 "test7.f"
!$omp parallel
      i = 2
!$omp end parallel
#line 40 "test7.f"
      
      pomp2_num_threads = pomp2_lib_get_max_threads()
      pomp2_if = .true.
      call POMP2_Parallel_fork(pomp2_region_3,
     &pomp2_if, pomp2_num_threads, pomp2_old_task,
     &pomp2_ctc_3 )
#line 41 "test7.f"
!$omp parallel
!$omp& firstprivate(pomp2_old_task) private(pomp2_new_task)
!$omp& if(pomp2_if) num_threads(pomp2_num_threads) 
      call POMP2_Parallel_begin(pomp2_region_3)
#line 42 "test7.f"
      i = 3
      call POMP2_Implicit_barrier_enter(pomp2_region_3,
     &pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_3,
     &pomp2_old_task)
      call POMP2_Parallel_end(pomp2_region_3)
#line 43 "test7.f"
!$omp end parallel
      call POMP2_Parallel_join(pomp2_region_3,
     &pomp2_old_task)
#line 44 "test7.f"

      call POMP2_Finalize()
#line 46 "test7.f"

      end program test7

      subroutine POMP2_Init_reg_000()
         include 'test7.f.opari.inc'
         call POMP2_Assign_handle( pomp2_region_1, 
     &   pomp2_ctc_1 )
         call POMP2_Assign_handle( pomp2_region_2, 
     &   pomp2_ctc_2 )
         call POMP2_Assign_handle( pomp2_region_3, 
     &   pomp2_ctc_3 )
      end
