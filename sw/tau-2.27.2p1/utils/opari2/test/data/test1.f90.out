
#line 1 "test1.f90"
! * This file is part of the Score-P software (http://www.score-p.org)
! *
! * Copyright (c) 2009-2011,
! *    RWTH Aachen University, Germany
! *    Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
! *    Technische Universitaet Dresden, Germany
! *    University of Oregon, Eugene, USA
! *    Forschungszentrum Juelich GmbH, Germany
! *    German Research School for Simulation Sciences GmbH, Juelich/Aachen, Germany
! *    Technische Universitaet Muenchen, Germany
! *
! * See the COPYING file in the package base directory for details.
! *
! * Testfile for automated testing of OPARI2
! *
! * @authors Bernd Mohr, Peter Philippen
! *
! * @brief Test the parsers ability to find directives and filter strings and comments.

program test1
!************************************************
!* The following pragmas should be instrumented *
!************************************************
      include 'test1.f90.opari.inc'
#line 24 "test1.f90"
      pomp2_num_threads = pomp2_lib_get_max_threads()
      pomp2_if = .true.
      call POMP2_Parallel_fork(pomp2_region_1,&
      pomp2_if, pomp2_num_threads, pomp2_old_task, &
      pomp2_ctc_1 )
#line 24 "test1.f90"
  !$omp parallel &
  !$omp firstprivate(pomp2_old_task) private(pomp2_new_task) &
  !$omp if(pomp2_if) num_threads(pomp2_num_threads)
      call POMP2_Parallel_begin(pomp2_region_1)
#line 25 "test1.f90"
      call POMP2_Barrier_enter(pomp2_region_2,&
      pomp2_old_task, pomp2_ctc_2 )
#line 25 "test1.f90"
  !$omp barrier
      call POMP2_Barrier_exit(pomp2_region_2, pomp2_old_task)
#line 26 "test1.f90"
      call POMP2_Implicit_barrier_enter(pomp2_region_1,&
      pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_1, pomp2_old_task)
      call POMP2_Parallel_end(pomp2_region_1)
#line 26 "test1.f90"
     !$omp end parallel
      call POMP2_Parallel_join(pomp2_region_1, pomp2_old_task)
#line 27 "test1.f90"

      pomp2_num_threads = pomp2_lib_get_max_threads()
      pomp2_if = .true.
      call POMP2_Parallel_fork(pomp2_region_3,&
      pomp2_if, pomp2_num_threads, pomp2_old_task, &
      pomp2_ctc_3 )
#line 28 "test1.f90"
  !$omp    parallel  &
  !$omp&   default(shared) &
  !$omp firstprivate(pomp2_old_task) private(pomp2_new_task) &
  !$omp if(pomp2_if) num_threads(pomp2_num_threads)
      call POMP2_Parallel_begin(pomp2_region_3)
#line 30 "test1.f90"
      call POMP2_Implicit_barrier_enter(pomp2_region_3,&
      pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_3, pomp2_old_task)
      call POMP2_Parallel_end(pomp2_region_3)
#line 30 "test1.f90"
  !$omp    end   &
  !$omp&   parallel
      call POMP2_Parallel_join(pomp2_region_3, pomp2_old_task)
#line 32 "test1.f90"
  
      pomp2_num_threads = pomp2_lib_get_max_threads()
      pomp2_if = .true.
      call POMP2_Parallel_fork(pomp2_region_4,&
      pomp2_if, pomp2_num_threads, pomp2_old_task, &
      pomp2_ctc_4 )
#line 33 "test1.f90"
  !$omp   parallel &
  !$omp&  default(shared) &
  !$omp firstprivate(pomp2_old_task) private(pomp2_new_task) &
  !$omp if(pomp2_if) num_threads(pomp2_num_threads)
      call POMP2_Parallel_begin(pomp2_region_4)
#line 35 "test1.f90"
      call POMP2_Implicit_barrier_enter(pomp2_region_4,&
      pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_4, pomp2_old_task)
      call POMP2_Parallel_end(pomp2_region_4)
#line 35 "test1.f90"
  !$omp end &               
  !$omp& parallel
      call POMP2_Parallel_join(pomp2_region_4, pomp2_old_task)
#line 37 "test1.f90"

!**************************************
!* The following should be ignored    *
!**************************************

! comment $omp
! comment !$omp parallel
!!$omp mo
! $ omp parallel
  write(*,*) "!$omp parallel"
  write(*,*) """!$omp parallel"""
end program test1

      subroutine POMP2_Init_reg_000()
         include 'test1.f90.opari.inc'
         call POMP2_Assign_handle( pomp2_region_1, &
         pomp2_ctc_1 )
         call POMP2_Assign_handle( pomp2_region_2, &
         pomp2_ctc_2 )
         call POMP2_Assign_handle( pomp2_region_3, &
         pomp2_ctc_3 )
         call POMP2_Assign_handle( pomp2_region_4, &
         pomp2_ctc_4 )
      end
