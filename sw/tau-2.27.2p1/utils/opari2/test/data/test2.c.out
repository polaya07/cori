
#include "test2.c.opari.inc"
#line 1 "test2.c"
/*
 * This file is part of the Score-P software (http://www.score-p.org)
 *
 * Copyright (c) 2009-2011,
 *    RWTH Aachen University, Germany
 *    Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
 *    Technische Universitaet Dresden, Germany
 *    University of Oregon, Eugene, USA
 *    Forschungszentrum Juelich GmbH, Germany
 *    German Research School for Simulation Sciences GmbH, Juelich/Aachen, Germany
 *    Technische Universitaet Muenchen, Germany
 *
 * See the COPYING file in the package base directory for details.
 *
 * Testfile for automated testing of OPARI2
 *
 * @authors Bernd Mohr, Peter Philippen
 *
 * @brief Test the basic instrumentation of all directives.
 */

#include <stdio.h>
#ifdef _OPENMP
#endif

int j;
#line 28 "test2.c"
#pragma omp threadprivate(j)

int main() {
  int i;
  int k = 0;

{
  int pomp2_num_threads = omp_get_max_threads();
  int pomp2_if = 1;
  POMP2_Task_handle pomp2_old_task;
  POMP2_Parallel_fork(&pomp2_region_1, pomp2_if, pomp2_num_threads, &pomp2_old_task, pomp2_ctc_1 );
#line 34 "test2.c"
 #pragma omp parallel POMP2_DLIST_00001 firstprivate(pomp2_old_task) if(pomp2_if) num_threads(pomp2_num_threads)
{   POMP2_Parallel_begin( &pomp2_region_1 );
#line 35 "test2.c"
 {
   printf("parallel\n");

{   POMP2_For_enter( &pomp2_region_2, pomp2_ctc_2  );
#line 38 "test2.c"
   #pragma omp for nowait
   for(i=0; i<4; ++i) {
     printf("for %d\n", i);
     k++;
   }
{ POMP2_Task_handle pomp2_old_task;
  POMP2_Implicit_barrier_enter( &pomp2_region_2, &pomp2_old_task );
#pragma omp barrier
  POMP2_Implicit_barrier_exit( &pomp2_region_2, pomp2_old_task ); }
  POMP2_For_exit( &pomp2_region_2 );
 }
#line 43 "test2.c"

{   POMP2_Flush_enter( &pomp2_region_3, pomp2_ctc_3  );
#line 44 "test2.c"
   #pragma omp flush(k)
  POMP2_Flush_exit( &pomp2_region_3 );
 }
#line 45 "test2.c"

{ POMP2_Task_handle pomp2_old_task;
  POMP2_Barrier_enter( &pomp2_region_4, &pomp2_old_task, pomp2_ctc_4  );
#line 46 "test2.c"
   #pragma omp barrier
  POMP2_Barrier_exit( &pomp2_region_4, pomp2_old_task ); }
#line 47 "test2.c"

{   POMP2_For_enter( &pomp2_region_5, pomp2_ctc_5  );
#line 48 "test2.c"
   #pragma omp for ordered nowait
   for(i=0; i<4; ++i) {
{   POMP2_Ordered_enter( &pomp2_region_6, pomp2_ctc_6  );
#line 50 "test2.c"
     #pragma omp ordered
{   POMP2_Ordered_begin( &pomp2_region_6 );
#line 51 "test2.c"
     {
       printf("for %d\n", i);
     }
  POMP2_Ordered_end( &pomp2_region_6 ); }
  POMP2_Ordered_exit( &pomp2_region_6 );
 }
#line 54 "test2.c"
   }
{ POMP2_Task_handle pomp2_old_task;
  POMP2_Implicit_barrier_enter( &pomp2_region_5, &pomp2_old_task );
#pragma omp barrier
  POMP2_Implicit_barrier_exit( &pomp2_region_5, pomp2_old_task ); }
  POMP2_For_exit( &pomp2_region_5 );
 }
#line 55 "test2.c"

{   POMP2_Sections_enter( &pomp2_region_7, pomp2_ctc_7  );
#line 56 "test2.c"
   #pragma omp sections nowait
   {
#line 58 "test2.c"
     #pragma omp section
{   POMP2_Section_begin( &pomp2_region_7, pomp2_ctc_7  );
#line 59 "test2.c"
     printf("section 1\n");
  POMP2_Section_end( &pomp2_region_7 ); }
#line 60 "test2.c"
     #pragma omp section
{   POMP2_Section_begin( &pomp2_region_7, pomp2_ctc_7  );
#line 61 "test2.c"
     { printf("section 2\n"); }
  POMP2_Section_end( &pomp2_region_7 ); }
#line 62 "test2.c"
   }
{ POMP2_Task_handle pomp2_old_task;
  POMP2_Implicit_barrier_enter( &pomp2_region_7, &pomp2_old_task );
#pragma omp barrier
  POMP2_Implicit_barrier_exit( &pomp2_region_7, pomp2_old_task ); }
  POMP2_Sections_exit( &pomp2_region_7 );
 }
#line 63 "test2.c"

#line 64 "test2.c"
   #pragma omp master
{   POMP2_Master_begin( &pomp2_region_8, pomp2_ctc_8  );
#line 65 "test2.c"
   {
     printf("master\n");
   }
  POMP2_Master_end( &pomp2_region_8 ); }
#line 68 "test2.c"

{   POMP2_Critical_enter( &pomp2_region_9, pomp2_ctc_9  );
#line 69 "test2.c"
   #pragma omp critical
{   POMP2_Critical_begin( &pomp2_region_9 );
#line 70 "test2.c"
   {
     printf("critical\n");
   }
  POMP2_Critical_end( &pomp2_region_9 ); }
  POMP2_Critical_exit( &pomp2_region_9 );
 }
#line 73 "test2.c"

{   POMP2_Critical_enter( &pomp2_region_10, pomp2_ctc_10  );
#line 74 "test2.c"
   #pragma omp critical(foobar)
{   POMP2_Critical_begin( &pomp2_region_10 );
#line 75 "test2.c"
   {
     printf("critical(foobar)\n");
   }
  POMP2_Critical_end( &pomp2_region_10 ); }
  POMP2_Critical_exit( &pomp2_region_10 );
 }
#line 78 "test2.c"

{   POMP2_Atomic_enter( &pomp2_region_11, pomp2_ctc_11  );
#line 79 "test2.c"
   #pragma omp atomic
   /* -------------- */
   /* do this atomic */
   i += 1;
  POMP2_Atomic_exit( &pomp2_region_11 );
 }
#line 83 "test2.c"
   /* -------------- */

{   POMP2_Single_enter( &pomp2_region_12, pomp2_ctc_12  );
#line 85 "test2.c"
   #pragma omp single nowait
{   POMP2_Single_begin( &pomp2_region_12 );
#line 86 "test2.c"
   {
     printf("single\n");
   }
  POMP2_Single_end( &pomp2_region_12 ); }
{ POMP2_Task_handle pomp2_old_task;
  POMP2_Implicit_barrier_enter( &pomp2_region_12, &pomp2_old_task );
#pragma omp barrier
  POMP2_Implicit_barrier_exit( &pomp2_region_12, pomp2_old_task ); }
  POMP2_Single_exit( &pomp2_region_12 );
 }
#line 89 "test2.c"
 }
{ POMP2_Task_handle pomp2_old_task;
  POMP2_Implicit_barrier_enter( &pomp2_region_1, &pomp2_old_task );
#pragma omp barrier
  POMP2_Implicit_barrier_exit( &pomp2_region_1, pomp2_old_task ); }
  POMP2_Parallel_end( &pomp2_region_1 ); }
  POMP2_Parallel_join( &pomp2_region_1, pomp2_old_task ); }
#line 90 "test2.c"

{
  int pomp2_num_threads = omp_get_max_threads();
  int pomp2_if = 1;
  POMP2_Task_handle pomp2_old_task;
  POMP2_Parallel_fork(&pomp2_region_13, pomp2_if, pomp2_num_threads, &pomp2_old_task, pomp2_ctc_13 );
#line 91 "test2.c"
 #pragma omp parallel POMP2_DLIST_00013 firstprivate(pomp2_old_task) if(pomp2_if) num_threads(pomp2_num_threads)
{   POMP2_Parallel_begin( &pomp2_region_13 );
#line 92 "test2.c"
 {
{
  int pomp2_if = 1;
{ POMP2_Task_handle pomp2_old_task;
  POMP2_Task_handle pomp2_new_task;
if (pomp2_if)  POMP2_Task_create_begin( &pomp2_region_14, &pomp2_new_task, &pomp2_old_task, pomp2_if, pomp2_ctc_14  );
#line 93 "test2.c"
   #pragma omp task POMP2_DLIST_00014 if(pomp2_if) firstprivate(pomp2_new_task, pomp2_if)
{ if (pomp2_if)  POMP2_Task_begin( &pomp2_region_14, pomp2_new_task );
#line 94 "test2.c"
   {
     printf("task\n");
   }
if (pomp2_if)  POMP2_Task_end( &pomp2_region_14 ); }
if (pomp2_if)  POMP2_Task_create_end( &pomp2_region_14, pomp2_old_task ); }
}
#line 97 "test2.c"

{ POMP2_Task_handle pomp2_old_task;
  POMP2_Taskwait_begin( &pomp2_region_15, &pomp2_old_task, pomp2_ctc_15  );
#line 98 "test2.c"
   #pragma omp taskwait
  POMP2_Taskwait_end( &pomp2_region_15, pomp2_old_task ); }
#line 99 "test2.c"
 }
{ POMP2_Task_handle pomp2_old_task;
  POMP2_Implicit_barrier_enter( &pomp2_region_13, &pomp2_old_task );
#pragma omp barrier
  POMP2_Implicit_barrier_exit( &pomp2_region_13, pomp2_old_task ); }
  POMP2_Parallel_end( &pomp2_region_13 ); }
  POMP2_Parallel_join( &pomp2_region_13, pomp2_old_task ); }
#line 100 "test2.c"

 // #pragma omp this should be ignored by opari and the compiler
 // #pragma this too
}
